generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  email String @unique 

  name String
  imageUrl String @db.Text

  servers Server[]
  members Member[]
  channels Channel[]
  
}

model Server {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  imageUrl String @db.Text
  inviteCode String @unique 

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  @@index([profileId])

  members Member[]
  channels Channel[]
  
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role MemberRole

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  @@index([profileId])

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  @@index([serverId])

  messages Message[]
  directMessages DirectMessage[]
  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")
}

enum ChannelType {
  TEXT
  VOICE
}

model Channel {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  type ChannelType

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  @@index([serverId])

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  @@index([profileId])

  messages Message[]
}

model Message {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String @db.Text
  fileUrl String? @db.Text
  deleted Boolean @default(false)
  
  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  @@index([memberId])

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  @@index([channelId])
  
  
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  
  memberTwoId String
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  @@index([memberTwoId])

  @@unique([memberOneId, memberTwoId])

  directMessages DirectMessage[]
}

model DirectMessage {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String @db.Text
  fileUrl String? @db.Text
  deleted Boolean @default(false)
  
  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  @@index([memberId])

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  @@index([conversationId])
}